version: '3.8'

services:
  # ================================
  # 应用服务 - 五好伴学后端
  # ================================
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: wuhao-tutor-app
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
    env_file:
      - .env.docker.production
    ports:
      - "8000:8000"
    volumes:
      - app_uploads:/app/uploads
      - app_logs:/app/logs
    networks:
      - wuhao-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # ================================
  # PostgreSQL 数据库服务
  # ================================
  postgres:
    image: postgres:15-alpine
    container_name: wuhao-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: wuhao_tutor
      POSTGRES_USER: wuhao_prod
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    secrets:
      - postgres_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/sql:/docker-entrypoint-initdb.d:ro
      - ./backups:/backups
    networks:
      - wuhao-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U wuhao_prod -d wuhao_tutor"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M

  # ================================
  # Redis 缓存服务
  # ================================
  redis:
    image: redis:7-alpine
    container_name: wuhao-redis
    restart: unless-stopped
    command: >
      redis-server
      --requirepass_FILE /run/secrets/redis_password
      --appendonly yes
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    secrets:
      - redis_password
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - wuhao-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 15s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  # ================================
  # Nginx 反向代理
  # ================================
  nginx:
    image: nginx:alpine
    container_name: wuhao-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - app_uploads:/var/www/uploads:ro
    networks:
      - wuhao-network
    depends_on:
      - app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M

  # ================================
  # 监控服务 - Prometheus (可选)
  # ================================
  prometheus:
    image: prom/prometheus:latest
    container_name: wuhao-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - wuhao-network
    profiles:
      - monitoring
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  # ================================
  # 监控可视化 - Grafana (可选)
  # ================================
  grafana:
    image: grafana/grafana:latest
    container_name: wuhao-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD_FILE=/run/secrets/grafana_password
      - GF_USERS_ALLOW_SIGN_UP=false
    secrets:
      - grafana_password
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - wuhao-network
    depends_on:
      - prometheus
    profiles:
      - monitoring
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  # ================================
  # 日志收集 - Filebeat (可选)
  # ================================
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.11.0
    container_name: wuhao-filebeat
    restart: unless-stopped
    user: root
    volumes:
      - ./monitoring/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - app_logs:/var/log/app:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - wuhao-network
    profiles:
      - logging
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 256M
        reservations:
          cpus: '0.05'
          memory: 64M

# ================================
# Docker密钥管理
# ================================
secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
  redis_password:
    file: ./secrets/redis_password.txt
  grafana_password:
    file: ./secrets/grafana_password.txt

# ================================
# 数据卷定义
# ================================
volumes:
  postgres_data:
    name: wuhao_postgres_data
    driver: local
  redis_data:
    name: wuhao_redis_data
    driver: local
  app_uploads:
    name: wuhao_app_uploads
    driver: local
  app_logs:
    name: wuhao_app_logs
    driver: local
  prometheus_data:
    name: wuhao_prometheus_data
    driver: local
  grafana_data:
    name: wuhao_grafana_data
    driver: local

# ================================
# 网络配置
# ================================
networks:
  wuhao-network:
    name: wuhao-prod-network
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
